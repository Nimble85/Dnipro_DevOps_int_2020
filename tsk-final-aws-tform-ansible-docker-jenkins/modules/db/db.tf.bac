variable "ami"                             {}
variable "size_instance_dev"               {}
variable "keypair"                         {}
variable "vpc_security_group_ids_instance" {}
variable "subnet_id"                       {}
variable "env_instance"                    {}
variable "subnet_id_instance"              {}

resource "aws_instance" "jenkins" {
  ami                         = var.ami
  instance_type               = var.size_instance_dev
  vpc_security_group_ids      = [var.vpc_security_group_ids_instance]
  iam_instance_profile        = aws_iam_instance_profile.s3_read_profile_db_dev.name
  associate_public_ip_address = true
  key_name                    = var.keypair
  subnet_id                   = var.subnet_id_instance
  user_data                   = file("../files/user_data_jenkins.sh")
  tags = {
    Name    = "DB_dev"
    Env     =  var.env_instance
    Owner   = "Kozulenko Volodymyr"
  }

  provisioner "local-exec" {
    command = <<EOD
cat <<EOF > aws_hosts
[jenkins]
${aws_instance.jenkins.public_ip}
EOF
EOD
  }

  provisioner "local-exec" {
    command = <<EOF
    aws ec2 wait instance-status-ok --instance-ids ${aws_instance.jenkins.id} --profile default  &&
    ansible-playbook -vvv --private-key ~/.ssh/jenkins.pem  -i aws_hosts ansible/bootstrap_jenkins.yml

  EOF
  }

}


resource "aws_instance" "db" {
  ami                         = var.ami
  instance_type               = var.size_instance_dev
  vpc_security_group_ids      = [var.vpc_security_group_ids_instance]
  iam_instance_profile        = aws_iam_instance_profile.s3_read_profile_db_dev.name
  associate_public_ip_address = true
  key_name                    = var.keypair
  subnet_id                   = var.subnet_id_instance
  depends_on                  = [aws_instance.jenkins]
  user_data                   = file("../files/user_data_db.sh")

  tags = {
    Name    = "DB_dev"
    Env     =  var.env_instance
    Owner   = "Kozulenko Volodymyr"
  }

  provisioner "local-exec" {
    command = <<EOD
cat <<EOF >> aws_hosts
[dev]
${aws_instance.db.public_ip}
EOF
EOD
  }

  provisioner "local-exec" {
    command = <<EOF
    aws ec2 wait instance-status-ok --instance-ids ${aws_instance.db.id} --profile default 

  EOF
  }

}

resource "aws_instance" "test" {
  ami                         = var.ami
  instance_type               = var.size_instance_dev
  vpc_security_group_ids      = [var.vpc_security_group_ids_instance]
  iam_instance_profile        = aws_iam_instance_profile.s3_read_profile_db_dev.name
  associate_public_ip_address = true
  key_name                    = var.keypair
  subnet_id                   = var.subnet_id_instance
  depends_on                  = [aws_instance.jenkins]
  user_data                   = file("../files/user_data_test.sh")
  tags = {
    Name    = "Test_dev"
    Env     =  var.env_instance
    Owner   = "Kozulenko Volodymyr"
  }

  provisioner "local-exec" {
    command = <<EOD
cat <<EOF >> aws_hosts
[test]
${aws_instance.test.public_ip}
EOF
EOD
  }

  provisioner "local-exec" {
    command = <<EOF
    aws ec2 wait instance-status-ok --instance-ids ${aws_instance.test.id} --profile default 
  EOF
  }

}


resource "aws_iam_role" "ec2_s3_access_role_db_dev" {
  name               = "s3_read_role_db_dev"
  assume_role_policy = <<EOF
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Action": "sts:AssumeRole",
     "Principal": {
       "Service": "ec2.amazonaws.com"
     },
     "Effect": "Allow",
     "Sid": ""
   }
 ]
}
EOF

}


resource "aws_iam_instance_profile" "s3_read_profile_db_dev" {
  name  = "s3_onlyread_profile_db_dev"
  role  = aws_iam_role.ec2_s3_access_role_db_dev.name
}
resource "aws_iam_policy" "s3_read_policy_db_dev" {
  name        = "S3ReadOnly_db_dev"
  description = "S3ReadOnly policy_db_dev"
  policy      = <<EOF
{
 "Version": "2012-10-17",
 "Statement": [
    {
       "Effect": "Allow",
       "Action": [
          "s3:Get*",
          "s3:List*"
       ],
           "Resource": "*"
        }
    ]

}
EOF
}

resource "aws_iam_policy_attachment" "attach_s3_read_db_dev" {
  name       = "test_attachment_s3_read_db_dev"
  roles      =["${aws_iam_role.ec2_s3_access_role_db_dev.name}"]
  policy_arn = aws_iam_policy.s3_read_policy_db_dev.arn
}

                          

##### outputs #######

output "public_db_ip" {
  description = "Instance Public IP  of our nginx_task_aws"
    value       = aws_instance.db.public_ip
    }
  
output "public_test_ip" {
  description = "Instance Public IP  of our nginx_task_aws"
    value       = aws_instance.test.public_ip
    }

output "public_jenkins_ip" {
  description = "Instance Public IP  of our nginx_task_aws"
    value       = aws_instance.jenkins.public_ip
    }


#########
output "aws_iam_instance_profile_s3_read_profile_db_dev_name" {
  value = aws_iam_instance_profile.s3_read_profile_db_dev.name

}


  
