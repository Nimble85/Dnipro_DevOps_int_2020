#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'master'
        }
    environment { 
        MAVEN_OPT      = '-Dmaven.test.skip=true'
        NAME_CONTAINER = 'java-wecalc'
        BUILD_NO       = 'v1.0'
        PORT_EXT       = '8081'
        PORT_INT       = '8080'
        NAME_IMAGE     = 'lightlook/java-wecalc'
        HOST           = 'http://localhost'
        TEST_URL1      = '/api/calculator/ping' 
        TEST_URL2      = '/api/calculator/add?x=8\\\\\\&y=26' 
        TEST_URL3      = '/api/calculator/sub?x=12\\\\\\&y=8' 
        TEST_URL4      = '/api/calculator/mul?x=11\\\\\\&y=8' 
        TEST_URL5      = '/api/calculator/div?x=12\\\\\\&y=12'
        TEST1          = 'grep -o \\\\\\"Welcome to Java Maven Calculator Web App\\\\\\"'
        TEST2          = 'grep -o \\\\\'\\\\\"result\\\\\":34\\\\\''
        TEST3          = 'grep -o \\\\\'\\\\\"result\\\\\":4\\\\\''
        TEST4          = 'grep -o \\\\\'\\\\\"result\\\\\":88\\\\\''
        TEST5          = 'grep -o \\\\\'\\\\\"result\\\\\":1\\\\\''

    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
        timestamps()
    }
  
    stages {
        stage("build maven app") {
            steps {
                echo "===============build maven app======================="
                dir ("task4-jenkins-pipeline2") {
                sh '''
                  echo "test1 = $TEST1"
                  echo "test2 = $TEST2"
                  echo "test3 = $TEST3"
                  echo "test4 = $TEST4"
                  echo "test5 = $TEST5"
                  mvn clean package $MAVEN_OPT
                  '''
                }
            }
        }   
        stage("buil docker container with app ") {
            steps {
                echo "===============build container calc======================="
                dir ("task4-jenkins-pipeline2") {
                sh 'docker build --rm -t $NAME_IMAGE:$BUILD_NO .'
                }                 
            }    
        }
        stage("run webcalc container") {
            steps {
                echo "===============run webcalc container======================="
                sh 'docker run --rm -d --name $NAME_CONTAINER -p $PORT_EXT:$PORT_INT   $NAME_IMAGE:$BUILD_NO'
                                
            }    
         }
        stage("test running webcalc") {
            steps {
                echo "===============testing running calc======================="
                sh 'sleep 30'
                sh '''
                    #!/bin/bash
                    curl  $HOST:$PORT_EXT$TEST_URL1 | $TEST1
                    curl  $HOST:$PORT_EXT$TEST_URL2 | $TEST2
                    curl  $HOST:$PORT_EXT$TEST_URL3 | $TEST3
                    curl  $HOST:$PORT_EXT$TEST_URL4 | $TEST4
                    curl  $HOST:$PORT_EXT$TEST_URL5 | $TEST5

                '''
                echo "===============check calc passed=======================" 
            }    

        }
       
        stage("stop container") {
            steps {
                echo "===============stop container jenkins======================="
                sh 'docker stop $NAME_CONTAINER'
                                
            }    
         }
        stage("login to docker hub") {
            steps {
                echo " ============== login to docker hub =================="
                withCredentials([usernamePassword(credentialsId: 'dockerhub_lightlook', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'docker login -u "$USERNAME" -p "$PASSWORD"'
                                   
                }
            }
        }
        stage("docker push") {
            steps {
                echo " ============== start pushing image =================="
                sh   '''
                 docker push $NAME_IMAGE
                 docker push $NAME_IMAGE:$BUILD_NO

                '''
            }
        }
    }    
    post { 
        failure { 
            echo "==============stop container after failure bild==============="
            sh 'docker stop $NAME_CONTAINER'
        }
    }
    
}    

