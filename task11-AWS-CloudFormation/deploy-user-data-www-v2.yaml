AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template LAMP Create a highly available,
  scalable LAMP stack with an Amazon ec2 instance with mysql for the backend data
  store.
Parameters:
  Region:
    Type: String
    Default: eu-central-1 
  StackName:
    Type: String
    Default: LAMP

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-9953a2f3
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default:  'subnet-1c2e3451,subnet-47cfd83a'
        
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  DbSubnet:
    Type: 'AWS::EC2::Subnet::Id'
    Default: 'subnet-1c2e3451'

  KeyName:
    Default: jenkins
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: dbpdo
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Default: dbpdo
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Default: dbpdo
    Description: Password for MySQL database access
    Type: String
    MinLength: '4'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  WebServerCapacity:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref Subnets
      
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !Ref WebServerCapacity
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment1: Configure the bootstrap helpers to install the Apache Web Server and PHP
      Comment2: >-
        The website content is downloaded from the CloudFormationPHPSample.zip
        file
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              httpd: []
              php: []
              php-mysql: []
          files:
            /var/www/html/dbconfig.php:
              content: !Join 
                - ''
                - - |
                    <?php
                  - |2
                                                    
                  - |2
                          
                  - $DB_host   = "
                  - !GetAtt 
                    - MySQLDatabase
                    - PublicIp
                  - |
                    ";
                  - $DB_user     = "
                  - !Ref DBUser
                  - |
                    ";
                  - $DB_pass = "
                  - !Ref DBPassword
                  - |
                    ";
                  - |2    
                    $DB_name = "dbpdo";
                  - |2
                          try
                  - |2
                          {$DB_con = new PDO("mysql:host={$DB_host};dbname={$DB_name}",$DB_user,$DB_pass);
                  - |2
                          $DB_con->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                  - |2
                          } catch(PDOException $e)
                  - |2
                           { echo $e->getMessage();
                  - |2
                          }   include_once 'class.crud.php';
                  - |2
                          $crud = new crud($DB_con);
                  - |
                    ?>
              mode: '000600'
              owner: apache
              group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: ami-076431be05aaf8080
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              mkdir -p /var/www/html/
              cat << EOF > /var/www/html/dbconfig.php
              <?php
              $DB_host = "${DBAddress}";
              $DB_user = "dbpdo";
              $DB_pass = "dbpdo";
              $DB_name = "dbpdo";
              try
              {
              $DB_con = new PDO("mysql:host={$DB_host};dbname={$DB_name}",$DB_user,$DB_pass);
              $DB_con->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
              }
              catch(PDOException $e)
              {
              echo $e->getMessage();
              }
              include_once 'class.crud.php';
              $crud = new crud($DB_con);
              ?>
              EOF
              yum install -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
              wget -P /tmp/ https://task11.s3.eu-central-1.amazonaws.com/site.zip
              sudo unzip /tmp/site.zip -d /var/www/html
              sudo usermod -a -G apache ec2-use
              sudo chown -R ec2-user:apache /var/www/
            - DBAddress: !GetAtt MySQLDatabase.PublicIp
              

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the ELB and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId
  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId: !Ref VpcId
  MySQLDatabase:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: jenkins
      ImageId: ami-0ec1ba09723e5bfac
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt DBEC2SecurityGroup.GroupId
      SubnetId: !Ref DbSubnet
      UserData: !Base64 
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - sudo su
            - yum install -y  mariadb-server
            - systemctl enable mariadb
            - systemctl start mariadb
            - wget -P /tmp/ https://task11.s3.eu-central-1.amazonaws.com/dbpdo.sql 
            - mysql -u root -e "CREATE DATABASE dbpdo;"
            - mysql -u root -e "USE dbpdo;"
            - mysql -u root -e "CREATE USER 'dbpdo'@'%' IDENTIFIED BY 'dbpdo';"
            - mysql -u root -e "CREATE USER 'dbpdo'@'localhost' IDENTIFIED BY 'dbpdo';"
            - mysql -u root -e "CREATE USER 'dbpdo'@'127.0.0.1' IDENTIFIED BY 'dbpdo';"
            - mysql -u root -e "GRANT ALL PRIVILEGES ON * . * TO 'dbpdo'@'%';"
            - mysql -u root -e "GRANT ALL PRIVILEGES ON * . * TO 'dbpdo'@'localgost';"
            - mysql -u root -e "FLUSH PRIVILEGES;"
            - mysql -u root  dbpdo< /tmp/dbpdo.sql;
            
              
      
      Tags:
        - Key: Name
          Value: My-DB
Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
